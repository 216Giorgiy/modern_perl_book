=head3 Blessed References

Z<blessed_references>

Perl 5's object system is deliberately minimal.  Three simple rules combine to
form the simple--though effective--basic object system:

=over 4

=item * A class is a package.

=item * A method is a subroutine.

=item * A (blessed) reference is an object.

=back

X<bless>
X<operators; bless>

Only the third rule introduces something not yet explained.  The C<bless>
keyword associates the name of a class with a reference, such that any method
invocation performed on that reference uses the associated class for
resolution.  That sounds more complicated than it is.

=begin sidebar

Though these rules explain Perl 5's underlying object system, they are somewhat
more minimal in practice than may be practical, especially for larger projects.
In particular, they offer few facilities for metaprogramming (using APIs to
manipulate the program itself).

Moose (L<moose>) is a better choice for serious, modern Perl programs larger
than a couple of hundred lines, but you will likely encounter bare-bones Perl 5
OO in existing code.  You may even have to write your own.

=end sidebar

X<constructor>
X<OO; constructor>

X<class method>
X<methods; class>

The default Perl 5 object constructor is a method which creates and blesses a
reference.  By convention, constructors have the name C<new()>, but this is not
a requirement.  By convention, constructors are also I<class methods>; in Perl
5 terms, this means that their invocants are strings containing the name of the
class:

=begin programlisting

    sub new
    {
        my $class = shift;
        bless {}, $class;
    }

=end programlisting

C<bless> takes two arguments, the reference to which to associate the name of a
class and the name of a class.  The class name does not have to exist, and you
may use C<bless> outside of a constructor or a class--though abstraction
recommends the use of the method.

This constructor receives the class name as a parameter, rather than
hard-coding a particular class name.  This is by design; reusing this method
through inheritance (or delegation or exporting) is possible precisely because
of this parametric behavior.

The most common type of reference to bless is a hash reference, but you can
bless any type of reference:

=begin programlisting

    my $array_obj  = bless [], $class;
    my $scalar_obj = bless \$scalar, $class;
    my $sub_obj    = bless \&some_sub, $class;

=end programlisting

X<instance data>
X<OO; instance data>

The type of reference blessed makes no difference when invoking methods on the
object.  It only governs how the object stores I<instance data>--the object's
own information.

Where classes built with Moose define their own object attributes
declaratively, Perl 5's default OO is more lax.  An class representing
basketball players which stores jersey number and position might use a
constructor like:

=begin programlisting

    package Player;

    sub new
    {
        my ($class, %attrs) = @_;

        bless \%attrs, $class;
    }

=end programlisting

... and create players with:

=begin programlisting

    my $joel = Player->new(
        number   => 10,
        position => 'center',
    );

    my $jerryd = Player->new(
        number   => 4,
        position => 'guard',
    );

=end programlisting

Within the body of the class, methods can access hash elements directly:

=begin programlisting

    sub format
    {
        my $self = shift;
        return '#' . $self->{number} . ' plays ' . $self->{position};
    }

=end programlisting

Admittedly, so can any code outside of the class.  This is an encapsulation
violation, so it's safer to provide accessor methods:

=begin programlisting

    sub number   { return shift->{number}   }
    sub position { return shift->{position} }

=end programlisting

... though you can see how this boilerplate code makes Moose much more
attractive.

=begin sidebar

Accessing instance data directly makes polymorphism and genericity much more
difficult; objects must conform to the same internal structure, rather than an
external interface.

=end sidebar

=head3 Method Lookup and Inheritance

X<method dispatch>
X<objects; methods>

Besides instance data, the other part of objects is method dispatch.  Given an
object (a blessed reference), a method call of the form:

=begin programlisting

    my $number = $joel->number();

=end programlisting

... looks up the name of the class associated with the blessed reference
C<$joel>.  In this case, the class is C<Player>.  Next, Perl looks for a
function named C<number> in the C<Player> package.

Inheritance--method inheritance--happens now.

If the C<Player> class inherits from another class, Perl looks in the parent
class (and so on and so on) until it finds a C<number> method.  If one exists,
Perl calls it with C<$joel> as an invocant.

X<@ISA>
X<variables; @ISA>

In the absence of Moose's metamodel, classes store information about the
parents from which they inherit in a package global variable named C<@ISA>.
The method dispatcher looks in a class's C<@ISA> to find the names of parent
classes in which to search for the appropriate method.  Thus, an
C<InjuredPlayer> class might contain C<Player> in its C<@ISA>.  You could write
this relationship as:

=begin programlisting

    package InjuredPlayer;

    @InjuredPlayer::ISA = 'Player';

=end programlisting

X<parent>
X<pragmas; parent>

... and many existing Perl 5 projects do this.  It's easier and simpler to use
the C<parent> pragma instead:

=begin programlisting

    package InjuredPlayer;

    use parent 'Player';

=end programlisting

X<base>
X<pragmas; base>

=begin sidebar

You may also see the C<base> pragma.  Perl 5.10 added C<parent> to supersede
C<base>; prefer C<base> in new code where you cannot use Moose.

=end sidebar

X<multiple inheritance>
X<objects; inheritance>

You may inherit from multiple parent classes:

=begin programlisting

    package InjuredPlayer;

    use parent qw( Player Hospital::Patient );

=end programlisting

Perl 5 has traditionally preferred a depth-first search of parents when
resolving method dispatch.  That is to say, if C<InjuredPlayer> inherits from
both C<Player> and C<Hospital::Patient>, a method call on an C<InjuredPlayer>
instance would look first in C<InjuredPlayer>, then C<Player>, then any of
C<Player>'s parents before looking in C<Hospital::Patient>.

X<mro>
X<pragmas; mro>

Perl 5.10 added a pragma called C<mro> which allows you to use a different
method resolution scheme called C3.  While the specific details can get complex
in the case of complex multiple inheritance hierarchies, the important
difference is that method resolution will visit all children of a parent before
visiting the parent.

While other, better techniques often allow you to avoid multiple inheritance
(sich as L<roles> and Moose method modifiers), the C<mro> pragma can help avoid
surprising behavior with method dispatch.  Enable it in your class with:

=begin programlisting

    package InjuredPlayer;

    use mro 'c3';

=end programlisting

=for author

Of course, this may be too much detail anyway, and C<mro> uses lexical scoping, and... oh goodness, please just use Moose already.

=end for

=head4 AUTOLOAD

X<AUTOLOAD>
X<objects; AUTOLOAD>
X<methods; AUTOLOAD>

If there is no applicable method in the invocant's class or any of its
superclasses, Perl 5 will next look for an C<AUTOLOAD> function in every class
following the method resolution order.  If it finds one, it will invoke that to
provide or decline the method creation.  See L<autoload> for more details.

As you might expect, this can get quite complex in the face of multiple
inheritance and multiple potential C<AUTOLOAD> targets.

=head4 Strategies for Coping with Blessed References

Avoid C<AUTOLOAD> where possible.  If you I<must> use it, use forward
declarations of your subs (L<forward_declaration>) to help Perl know which
C<AUTOLOAD> will provide the method implementation.

Use accessor methods rather than accessing instance data directly through the
reference.  This applies even within the bodies of methods within the class
itself.  Generating these yourself can be tedious; consider at least using a
module such as C<Class::Accessor> to alleviate the boilerplate.

Expect that someone, somewhere will eventually need to subclass (or delegate to
or reimplement the interface of) your classes.  Make it easier for them by not
assuming details of the internals of your code, by using the two-argument form
of C<bless>, and by breaking your classes into the smallest responsible units
of code.

Do not mix functions and methods in the same class.

Use a single F<.pm> file for each class, unless the class is a small,
self-contained helper only used from a single place.

Consider using Moose and C<Any::Moose> instead of bare-bones Perl 5 OO; they
can interact with vanilla classes and objects with ease, the alleviate almost
all of the tedium, and they provide more and better features.

=for author

SUPER?  The SUPER problem?

=end for
