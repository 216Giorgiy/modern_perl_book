=head3 Indirect Objects

Z<indirect_objects>

Read a few Perl 5 object tutorials (or the documentation of too many CPAN
modules), and you might believe that C<new> is a language keyword just as in
C++ and Java:

=begin programlisting

    my $q = B<new> CGI; # DO NOT USE

=end programlisting

As L<objects> has made clear, a constructor in Perl 5 is anything which returns
an object.  By convention, constructors are class methods named C<new()>, but
you have the flexibility to choose a different approach to meet your needs.  If
C<new()> is instead a class method, the standard method call approach should
apply:

=begin programlisting

    my $q = CGI->new();

=end programlisting

These syntaxes are equivalent in behavior, except when they're not.

X<indirect object notation>
X<indirect objects>
X<dative notation>
X<dative>

The first form is the indirect object form (more precisely, the I<dative>
case), where the verb (the method) precedes the noun to which it refers (the
object).  This is fine in spoken languages, but it introduces difficult to
debug ambiguities in Perl 5.

=head4 Bareword indirect invocations

One problem is that the name of the method is a bareword, requiring the Perl 5
parser to perform several heuristics to determine the proper interpretation.
While these heuristics are well-tested and almost always correct, their failure
modes can be very confusing and difficult to debug.  Worse, they're fragile in
the face of the I<order> of compilation and module loading.

Parsing is more difficult for humans I<and> the computer when the constructor
takes arguments.  The Java-style approach may resemble:

=begin programlisting

    # DO NOT USE
    my $obj = new Class( arg => $value );

=end programlisting

... thus making the classname C<Class> look like a subroutine call.  Perl 5
I<can> disambiguate many of these cases, but its heuristics depend on which
package names the parser has seen so far, which barewords it has already
resolved (and how it resolved them), and the I<names> of subroutines already
declared in the current package.

Imagine running afoul of a subroutine with L<prototypes> with a name which just
happens to conflict somehow with the name of a class or a method called
indirectly.  This happens infrequently, but it's difficult enough to debug that
it's worth making impossible by avoiding this syntax.

=head4 Indirect notation scalar limitations

Another danger of the syntax is that the parser expects a single scalar
expression as the object.  You may have had trouble printing to a filehandle
stored in an aggregate variable:

=begin programlisting

    # DOES NOT WORK AS WRITTEN
    say $config->{output} "This is a diagnostic message!";

=end programlisting

C<print>, C<close>, and C<say> -- all keywords which operate on filehandles --
operate in an indirect fashion.  This was fine when filehandles were package
globals, but with L<lexical_filehandles> the problem can be more apparent, when
Perl 5 tries to call the C<say> method on the C<$config> object.  The solution
is to disambiguate the expression which produces the intended invocant:

=begin programlisting

    say B<{>$config->{output}B<}> "This is a diagnostic message!";

=end programlisting

=head4 Alternatives to indirect notation

Direct invocation notation does not suffer this ambiguity problem.  To
construct an object, call the constructor method on the class name directly:

=begin programlisting

    my $q   = CGI->new();
    my $obj = Class->new( arg => $value );

=end programlisting

X<IO::Handle>

For filehandle operations, which are limited, known to the Perl 5 parser
directly, and pervasive in their idiomatic use of the dative case, use curly
brackets to remove ambiguity about your intended invocant.  Alternately,
consider loading the core C<IO::Handle> module which allows you to perform IO
operations by calling methods on filehandle objects (such as lexical
filehandles).

=begin sidebar

For supreme paranoia, you may disambiguate class method calls further by
appending C<::> to the end of class names, such as C<< CGI::->new() >>.  Very
little code does this in practice, however.

=end sidebar

X<Perl::Critic::Policy::Dynamic::NoIndirect; CPAN modules>
X<Perl::Critic::Policy::Dynamic::NoIndirect>
X<Perl::Critic; CPAN modules>
X<Perl::Critic>
X<indirect; CPAN modules>
X<indirect>

To identify indirect calls in your code, use the CPAN module
C<Perl::Critic::Policy::Dynamic::NoIndirect> (a plugin for C<Perl::Critic>).
To forbid their use at compile time, use the CPAN module C<indirect>.
