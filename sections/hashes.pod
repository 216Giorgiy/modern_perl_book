Z<hashes>

X<hashes>
X<hash>

A I<hash> is a first-class Perl data structure which associates string keys
with scalar values.  You might have encountered them as I<tables>,
I<associative arrays>, I<dictionaries>, or I<maps> in other programming
languages.  In the same way that the name of a variable corresponds with a
storage location, a key in a hash refers to a value.

A well-respected, if hoary, analogy is to think of a hash like you would a
telephone book: use your friend's name to look up her number.

Hashes have a couple of important properties.  First, they can store one scalar
per unique key.  Second, they do not normally promise any specific ordering.  A
hash is a big container full of key/value pairs.

=head4 Declaring Hashes

X<hashes; declaring>

A hash has the C<%> sigil.  Declare a lexical hash with:

=begin programlisting

    my %favorite_flavors;

=end programlisting

A hash starts out empty, with no keys or values.  In boolean context, a hash
returns false if it's empty (contains no keys or values) and true otherwise.

You can assign and access individual elements of a hash:

=begin programlisting

    my %favorite_flavors;
    $favorite_flavors{Gabi}    = 'Mint chocolate chip';
    $favorite_flavors{Annette} = 'French vanilla';

=end programlisting

Notice that hashes use the scalar sigil C<$> when accessing individual elements
and they use curly braces C<{ }> for indexing.

You may assign a list of keys and values to a hash at once:

=begin programlisting

    my %favorite_flavors = (
        'Gabi',    'Mint chocolate chip',
        'Annette', 'French vanilla',
    );

=end programlisting

X<fat comma>

If you assign an odd number of elements to the hash, you will receive a warning
that the results are not what you anticipated.  It's often more obvious to use
the I<fat comma> operator to associate values with keys, as it makes the
required pairing more visible:

=begin programlisting

    my %favorite_flavors = (
        Gabi    B<< => >> 'Mint chocolate chip',
        Annette B<< => >> 'French vanilla',
    );

=end programlisting

The fat comma operator acts like the regular comma, but it also causes the Perl
parser to treat the previous bareword as if it were a quoted word.  That is, if
you have a function with the same name as a hash key, the fat comma will not call the function:

=begin programlisting

    sub name { 'Victor' }

    my %address =
    (
        name => '1123 Fib Place',
    );

=end programlisting

The key of the hash will be C<name> and not C<Victor>.  If you intend to call
the function to get the key, disambiguate your intent by making the call
explicit:

=begin programlisting

    my %address =
    (
        B<name()> => '1123 Fib Place',
    );

=end programlisting

=begin notetip

Be aware that hash assignment occurs in list context; if you call a function
within this assignment, you may have to use C<scalar()> to disambiguate its
context.

=end notetip

To empty a hash, either leave the outermost scope of its lexical declaration or
assign an empty listN<Unary C<undef> also works, but it's somewhat more rare.>:

=begin programlisting

    %favorite_flavors = ();

=end programlisting

=head4 Accessing Hash Values

X<hashes; accessing values>
X<hashes; values>

Because a hash is an aggregate, you can access individual values with an
indexing operation.  Use a key as an index (a I<keyed access> operation) to
retrieve a value from a hash:

=begin programlisting

    my $address = $addresses{$name};

=end programlisting

In this example, C<$name> contains a string which is also a key of the hash.
Note that, as with accessing an individual element of an array, the hash's
sigil has changed from C<%> to C<$> to indicate that the keyed access is for a
scalar value.

=for author

Check if they are, in fact, the same rules.

=end for

You may also use string literals as hash keys.  Perl quotes barewords
automatically according to the same rules as fat commas:

=begin programlisting

    # autoquoted
    my $address = $addresses{Victor};

    # needs quoting; not a valid bareword
    my $address = $addresses{B<'>Sue-LinnB<'>};

    # function call needs disambiguation
    my $address = $addresses{get_nameB<()>};

=end programlisting

You might find it clearer always to quote string literal hash keys, but the
autoquoting behavior is so well established in Perl 5 culture that it's better
to reserve the quotes for extraordinary circumstances, where they stand out and
broadcast that you're doing something different.

Be aware that even Perl 5 keywords get the autoquoting treatment:

=begin programlisting

    my %addresses =
    (
        Vincent => '1123 Fib Place',
        Utako   => 'Cantor Hotel, Room 1',
    );

    sub get_address_from_name
    {
        return $addresses{B<+>shift};
    }

=end programlisting

The unary plus is a Perl 5 idiom used to turn what would be a bareword
(C<shift>) subject to autoquoting rules into an expression.  As this implies,
you can use an arbitrary expression--not only a function call--as the key of a
hash:

=begin programlisting

    # don't actually I<do> this though
    my $address = $addresses{reverse 'tnecniV'};

    # interpolation is fine
    my $address = $addresses{"$first_name $last_name"};

    # so are method calls
    my $address = $addresses{ $user->name() };

=end programlisting

Anything that evaluates to a string is an acceptable hash key.  Of course, hash
keys can only be strings.  Thus if you use an object as a hash key, you'll get
the stringified version of that object instead of the object itself:

=begin programlisting

    for my $isbn (@isbns)
    {
        my $book = Book->fetch_by_isbn( $isbn );

        # unlikely to do what you want
        $books{$book} = $book->price;
    }

=end programlisting

=begin sidebar

The CPAN module (which one?) lets you use arbitrary scalars as hash keys; it
stores them non-destructively.

=end sidebar

X<exists>
X<operators; exists>
X<hashes; exists>

You don't always know when a hash key exists, however.  The C<exists> operator
returns a boolean value to indicate whether the given hash contains a key of
that string:

=begin programlisting

    my %addresses =
    (
        Vincent => '1123 Fib Place',
        Utako   => 'Cantor Hotel, Room 1',
    );

    say "Have Vincent's address" if exists $addresses{Vincent};
    say "Have Warnie's address"  if exists $addresses{Warnie};

=end programlisting

Using C<exists> instead of checking the hash key directly avoids two problems.
First, it does not check the boolean nature of the hash I<value>; a hash key
may exist with a value even if that value evaluates to a boolean false.
Second, with nested data structures, it avoids autovivifying
(L<autovivification>) the value.

=head4 Accessing Hash Keys and Values

X<hashes; keys>
X<hashes; values>
X<operators; values>
X<operators; keys>

X<values>
X<keys>

X<each>
X<operators; each>

=for author

keys/values

each
    - single iterator per hash
    - reset with keys

slices

empty hash
    - truth value
    - list context
    - scalar context ?

uses of hashes ?
    - named parameters
    - sets
        - @hash{@slice} = undef;
    - caches
        - orcish maneuver
    - identity hash

tied hashes?
    - Tie::IxHash

=end for
