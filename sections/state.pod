=head1 State

Z<state>

Closures (L<closures>) are an easy, effective, and safe way to make data
persistent between function invocations without using global variables.  If you
need to share variables between named functions, a common idiom is to introduce
a new scope for only those function declarations:

=begin programlisting

    {
        my $safety = 0;

        sub enable_safety  { $safety = 1 }
        sub disable_safety { $safety = 0 }

        sub do_something_awesome
        {
            return if $safety;
            ...
        }
    }

=end programlisting

The encapsulation of functions to toggle the safety lets all three functions
share state without exposing it to external code directly.  This idiom works
well for cases where external code should be able to change internal state, but
it's clunkier when only one function needs to manage that state.

For example, suppose that you want to count the number of customers at your ice cream parlor.  Every hundredth person gets free sprinkles:

=begin programlisting

    {
        my $cust_count = 0;

        sub serve_customer
        {
            $cust_count++;

            my $order = shift;

            add_sprinkles($order) if $cust_count % 100 == 0)

            ...
        }
    }

=end programlisting

X<state>

That I<works>, but creating a new lexical scope for a single function
introduces more accidental complexity than is necessary.  A new feature in
5.10, the C<state> keyword, lets you declare a lexically scoped variable with a value that persists between invocations:

=begin programlisting

    sub serve_customer
    {
        B<state $cust_count = 0;>
        $cust_count++;

        my $order = shift;
        add_sprinkles($order) if $cust_count % 100 == 0)

        ...
    }

=end programlisting

Declare a C<state> variable the same way you would declare a lexical with
C<my>.  Only the first invocation of the C<state> keyword performs the
initialization.  All subsequent invocations of this function will retain the
value of C<$cust_count> at the point control flow left the function.

X<feature>
X<feature; state>

Note that you must enable this feature explicitly by using a module such as
C<Modern::Perl>, the C<feature> pragma, or requiring a specific version of Perl
of 5.10 or newer (with C<use 5.010;> or C<use 5.012;>, for example).

You may also use C<state> within anonymous functions, such as the canonical
counter example:

=begin programlisting

    sub make_counter
    {
        return sub
        {
             B<state $count = 0;>
             return $count++;
         }
    }

=end programlisting

... though there are fewer obvious benefits to this approach.

=begin sidebar

Perl 5.10 deprecated a technique abused in previous versions of Perl by which
you could effectively emulate C<state>.  Using a postfix conditional which
evalutes to false with a C<my> declaration avoids I<reinitializing> a lexical
variable to C<undef> or its initialized value.  This technique now gives a
deprecated warning, and rightfully so.  Avoid it, but understand it if you
encounter it:

=begin programlisting

    sub inadvertent_state
    {
        # DEPRECATED; do not use
        my $counter = 1 if 0;

        ...
    }

=end programlisting

Any use of a postfix conditional expression modifying a lexical variable
declaration gives this warning now.  It's too easy to write inadvertently buggy
code with this technique, and it's too rarely clear if the programmer intended
to emulate C<state>.

=end sidebar
