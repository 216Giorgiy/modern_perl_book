Z<arrays>

Perl 5 arrays are first-class data structures which store zero or more scalars.
This means that Perl 5 provides a separate data type at the language level (an
array) with its own naming slot (an array sigil).  Arrays support indexed
access; that is, you can access individual members of the array by integer
indexes.

The C<@> sigil denotes an array.  To declare an array:

=begin programlisting

    my @items;

=end programlisting

Array indices start at 0.  The first element of an array is at index zero:

=begin programlisting

    # @cats contains a list of Cat objects
    my $first_cat = $cats[0];

=end programlisting

X<variant sigils>
X<sigils; variance>

Note that I<accessing> an individual element of an array in Perl 5 requires the
scalar sigil.  Perl 5 (and you) can recognize that C<$cats[0]> refers to the
C<@cats> array even with the sigil change.  The square brackets (C<[]>) always
identify indexed access to an aggregate variable.  That may sound like a lot to
remember, but all it means is "look up one thing in a group of things by an
integer".

The first index of an array is 0.  The last index of an array depends on the
number of elements in the array.  An array in scalar context (scalar
assignment, string concatenation, addition, boolean context) evaluates to the
number of elements it contains:

=begin programlisting

    # scalar assignment
    my $num_cats = @cats;

    # string concatenation
    say 'I have ' . @cats ' cats!';

    # addition
    my $num_animals = @cats + @dogs + @fish;

    # boolean context
    say 'Yep, a cat owner!' if @cats;

=end programlisting

Thus if you need the specific index of the final element of an array, subtract
one from the number of elements of the array (because array indexes start at
0):

=begin programlisting

    my $first_index = 0;
    my $last_index  = @cats - 1;

    say   'My first cat has an index of $first_index, '
        . 'and my last cat has an index of $last_index.'

=end programlisting

You can also use the special variable form of the array to find the last index;
replace the C<@> array sigil with the slightly more unwieldy C<$#>:

=begin programlisting

    my $first_index = 0;
    B<my $last_index  = $#cats;>

    say   'My first cat has an index of $first_index, '
        . 'and my last cat has an index of $last_index.'

=end programlisting

That may not read as nicely, however.  Most of the time you don't need that
syntax, for two reasons.  First, you can use negative offsets to access an
array from the end instead of the start.  The final element of an array is
available from the index C<-1>.  The penultimate element of the array is
available at index C<-2> and so on.

Perl 5 arrays are mutable; they do not have a fixed size.  They can extend or
contract as necessary.

=for author

assignment
    - list
    - scalar
    - context

iteration

flattening

interpolation

arrays as vectors, stacks, queues, and the like

    - array slices

common array operators

nested arrays
    mention of anonymous arrays

=end for
