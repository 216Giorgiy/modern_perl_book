=head2 Operator Characteristics

Z<operator_characteristics>
X<operators; characteristics>

Both C<perldoc perlop> and C<perldoc perlsyn> provide voluminous information
about how Perl's operators behave.  Given those references, it's more important
to know how the documentation categorizes and classifies operators, as this
governs their behavior.  Several characteristics apply.

=head3 Precedence

Z<precedence>
X<precedence>

The I<precedence> of an operator helps determine when Perl should evaluate it
in an expression.  Operators with higher precedence evaluate before operators
with lower precedence.  Operators with the same precedence evaluate depending
on other characteristics (L<fixity> and L<associativity>).  Because the
precedence of multiplication is higher than the precedence of addition, C<7 + 7
* 10> evaluates to C<77>, not C<140>.  You may force the evaluation of some
operators before others by wrapping them and their arguments in parentheses;
C<(7 + 7) * 10> I<does> evaluate to C<140>, as the addition operation becomes a
single unit which gets multiplied.

C<perldoc perlop> contains a table of precedence.  Almost no one has this table
memorized.  The best way to manage precedence is to keep your expressions
simple.  The second best way is to use parentheses to clarify precedence in
complex expressions.

=head3 Associativity

Z<associativity>
X<associativity>
X<associativity; left>
X<left associative>
X<associativity; right>
X<right associative>

Operators of the same precedence may have different I<associativity>, which
governs whether they evaluate from left to right or right to left.  Addition is
left associative, such that C<2 + 3 + 4> evaluates C<2 + 3> first, then adds
C<4> to the result.  Exponentiation is right associative, such that C<2 ** 3 **
4> performs C<3 ** 4> first, then raises C<2> to that power.

Simplifying complex expressions and using parentheses to demonstrate your
intent is more important than memorizing the associativity of expressions.

=begin sidebar

X<B::Deparse>
X<precedence; disambiguation>
X<associativity; disambiguation>

The core C<B::Deparse> module can rewrite snippets of code to demonstrate
exactly how Perl handles operator precedence and associativity.  Use the C<-p>
flag to produce extra parentheses which group expressions to make the effective
evaluation clear.  C<perl -MO=Deparse,p> on such a snippet of code.  Yet be
aware that Perl's optimizer will simplify mathematical operations as given as
examples earlier in this section; use variables instead, as in C<$a ** $b **
$c>.

=end sidebar

=head3 Arity

Z<arity>

X<arity>
X<operators; arity>
X<nullary>
X<unary>
X<binary>
X<trinary>
X<listary>

The I<arity> of an operator is the number of operands on which it operates.  A
I<nullary> operator operates on zero operands.  A I<unary> operator operates on
one operand.  A I<binary> operator operates on two operands.  A I<trinary>
operator operates on three operands.  A I<listary> operator operates on a list
of operands.

There's no single good rule for determining the arity of an operator, other
than the fact that most operate on two, many, or one operands.  The description
of the operator should suggest what you can expect.

For example, the arithmetic operators are binary operators, and are usually
left associative.  C<2 + 3 - 4> evaluates C<2 + 3> first; addition and
subtraction have the same precedence, but they're left associative and binary,
so the proper evaluation order is the leftmost two operands (C<2> and C<3>)
with the leftmost operator (C<+>), and then the result as the first operand and
C<4> with the second to the rightmost operator.

One common source of confusion for Perl novices is the interaction of listary
operators (especially function calls) with nested expressions.  Grouping
parentheses make your intent clear.  Even still, watch out for confusion in
code such as:

=begin programlisting

    # probably buggy code
    say ( 1 + 2 + 3 ) * 4;

=end programlisting

... as Perl 5 happily interprets the parentheses as denoting the arguments to
C<say>, not grouping an expression to change precedence.

=head3 Fixity

Z<fixity>
X<fixity>
X<operators; fixity>
X<infix>
X<fixity; infix>
X<prefix>
X<fixity; prefix>
X<postfix>
X<fixity; postfix>

The I<fixity> of an operator is its position relative to its operands.  The
mathematic operators tend to be I<infix> operators, where they appear between
their operands.  Other operators are C<prefix>, where they appear before their
operands; these tend to be unary operators, such as the prefix increment
operator C<++$x> or the mathematical and boolean negation operators (C<-$x> and
C<!$x>, respectively).  The other fixity type is I<postfix>, where the operator
appears after its operand (such as the list of arguments provided to a function
or method call).
